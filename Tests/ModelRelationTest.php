<?php
/*
 * This file is a part of Solve framework.
 *
 * @author Alexandr Viniychuk <alexandr.viniychuk@icloud.com>
 * @copyright 2009-2014, Alexandr Viniychuk
 * created: 05.10.14 10:32
 */

namespace Solve\Database\Tests;

require_once 'SolveDatabaseTestBasic.php';
use Solve\Database\Models\ModelOperator;
use Solve\Database\Models\ModelStructure;
use Solve\Database\QC;

class ModelRelationTest extends SolveDatabaseTestBasic {

    public function testSimpleRelation() {
        $product = \Product::loadOne(1);
        var_dump($product->category);die();
    }


    protected static function putTestContent() {
        QC::executeSQL('DROP TABLE IF EXISTS products');
        QC::executeSQL('DROP TABLE IF EXISTS categories');
        $storagePath = __DIR__ . '/storage/';

        $mo = ModelOperator::getInstance($storagePath);
        $mo->generateBasicStructure('Product');
        $mo->generateBasicStructure('Category');

        ModelStructure::getInstanceForModel('Product')
            ->addColumn('id_category', array('type' => 'int(11) unsigned'))
            ->addRelation('category')
            ->addRelation('category_title', array(
                'table' => 'categories',
                'fields' => array('title'=>'category_title')
            ))->saveStructure();

        ModelStructure::getInstanceForModel('Category')
            ->addRelation('product')
            ->saveStructure();

        $mo->generateAllModelClasses();
        $mo->updateDBForAllModels();
        require_once $storagePath . 'bases/BaseProduct.php';
        require_once $storagePath . 'classes/Product.php';
        QC::create('products')->insert(array('title' => 'Macbook Air', 'id_category'=>1))->execute();
        QC::create('products')->insert(array('title' => 'Macbook Pro', 'id_category'=>1))->execute();
        QC::create('categories')->insert(array('title' => 'Notebooks'))->execute();

        $testProductFileContent = <<<TEXT
<?php

class ProductCustom extends BaseProduct {
    private \$_internalManufacturer = 'solve';
    public function getManufacturer() { return \$this->_internalManufacturer; }
    public function setManufacturer(\$value) { \$this->_internalManufacturer = \$value; return \$this; }
}
TEXT;

        file_put_contents($storagePath . 'classes/ProductCustom.php', $testProductFileContent);
        require_once $storagePath . 'classes/ProductCustom.php';
        $mo->setStructureForModel('ProductCustom', $mo->generateBasicStructure('Product', false), false);
    }

    public static function tearDownAfterClass() {
//        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }


}
 